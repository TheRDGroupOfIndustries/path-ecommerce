datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  SELLER
  ASSOCIATE
  ADMIN
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String
  phone         String?
  address       String?
  imageUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @default(USER)
  reviews       Review[]
  marketplaces  Marketplace[]
  properties    Property[]
  productSeller Products[]
  createdById   String?

  associate Associate?

  // Relations for referral system
  createdReferrals Referral[] @relation("CreatedReferrals") // User has created referrals

  orders Order[]
  kyc    Kyc?
  transactions ReferralTransaction[]
}

model Marketplace {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String[]
  category    String?   @default("General")
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  reviews     Review[]
  enquires    Enquire[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Property {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String[]
  category    String?   @default("Houses")
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  reviews     Review[]
  enquires    Enquire[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id            String       @id @default(cuid())
  rating        Int
  comment       String?
  userId        String
  marketplaceId String?
  propertyId    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  productId     String?
  product       Products?    @relation(fields: [productId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  marketplace   Marketplace? @relation(fields: [marketplaceId], references: [id])
  property      Property?    @relation(fields: [propertyId], references: [id])
}

model Enquire {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  message       String
  marketplaceId String?
  propertyId  String?
  marketplace Marketplace? @relation(fields: [marketplaceId], references: [id])
  property    Property?    @relation(fields: [propertyId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

// Flow - Ask question - Goes to seller dashboard who listed product - he/she answer appear in user side

model Faq {
  id        String   @id @default(cuid())
  question  String // Judge sahabbb product ke bare me sawalat hai apse!~ ye, ye seller batayange mujhe iska jawab...
  answer    String?
  productId String
  product   Products @relation(fields: [productId], references: [id])
}

model Products {
  id          String   @id @default(cuid())
  // Basic Details - These keys are must provided by listing creator ~ east or west nukkar wali chai dukan is best...!
  name        String
  description String
  images      String[]
  price       String
  discount    Int
  ratings     Int
  features    String[]
  highlights  String[]
  insideBox   String[]
  isTrendy    Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  // Filled from backend ~ Get id from Token and parse it futher into sellerId - seller will automatically fetch user with it
  category String?
  sellerId String
  seller   User    @relation(fields: [sellerId], references: [id])

  referralBy         String? //associateid
  referralPercentage Int? //40

  // User side questions ~ Shakii log, bharosa to hai nahi aaye bare reviews dekhne...
  review Review[]
  Faq    Faq[]
  orders Order[]
}

// Further Refreal will appear here ~ ek mota hathi gumne gya...
// #---------- Associate ------------#

model Associate {
  id        String   @id @default(uuid())
  userId    String   @unique
  level     Int
  percent   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Referral {
  id           String   @id @default(uuid())
  referral     String   @unique // e.g., "adarsh-40"
  createdFor   User     @relation("CreatedReferrals", fields: [createdForId], references: [id])
  createdForId String   @unique
  usedBy       String[] //  Now optional
  createdAt    DateTime @default(now())

  transactions ReferralTransaction[]
}

// as of now - order 

model Order {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  quantity    Int
  totalAmount Float
  status      String
  createdAt   DateTime @default(now())

  product Products? @relation(fields: [productId], references: [id])
  user    User?     @relation(fields: [userId], references: [id])
}

//KYC

model Kyc {
  id              String   @id @default(cuid())
  fullName        String
  dateOfBirth     DateTime
  address         String
  phoneNumber     String
  email           String
  aadharNumber    String
  panNumber       String
  aadharFront     String
  aadharBack      String
  panCard         String
  passport        String?
  bankStatement   String?
  salarySlip      String?
  image           String
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED
  sellerId        String   @unique
  seller          User     @relation(fields: [sellerId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


model Announcement {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
}


model ReferralTransaction {
  id          String   @id @default(uuid())
  referralId  String
  associateId String
  productId   String
  productName String
  price       Float
  percent     Float
  commission  Float
  createdAt   DateTime @default(now())

  referral    Referral @relation(fields: [referralId], references: [id])
  associate   User     @relation(fields: [associateId], references: [id])
}

