datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  SELLER
  ASSOCIATE
  ADMIN
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String?
  phone         String?
  address       String?
  imageUrl      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @default(USER)

  reviews       Review[]      
  marketplaces  Marketplace[]
  properties    Property[]
  productSeller Products[]
  createdById   String?
  associate     Associate?

  createdReferrals Referral[]                     @relation("CreatedReferrals")
  associateTransactions ReferralTransaction[]     @relation("AssociateUser")
  usedReferralTransactions ReferralTransaction[]  @relation("ReferredUser")

  orders        Order[]
  kyc           Kyc?
  cartItems     CartItem[]

  supportMessages     Support[] @relation("SupportUser")
  receivedSupportMsgs Support[] @relation("SupportSeller")

  usedReferralId   String?                      // FK to Referral
  usedReferral     Referral? @relation("ReferralUsedByUsers", fields: [usedReferralId], references: [id])
  enquiries     Enquire[] @relation("AssociateRelation")

}

model Marketplace {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String[]
  category    String?   @default("General")
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  reviews     Review[]
  enquires    Enquire[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Property {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String[]
  category    String?   @default("Houses")
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  reviews     Review[]
  enquires    Enquire[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Review {
  id            String       @id @default(cuid())
  rating        Int
  comment       String?
  userId        String
  marketplaceId String?
  propertyId    String?
  productId     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  product       Products?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  marketplace   Marketplace? @relation(fields: [marketplaceId], references: [id], onDelete: Cascade)
  property      Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Enquire {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  subject       String?
  message       String
  marketplaceId String?
  propertyId    String?
  referralCode  String?
  associateId   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  marketplace   Marketplace? @relation(fields: [marketplaceId], references: [id],  onDelete: Cascade)
  property      Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  associate     User? @relation("AssociateRelation", fields: [associateId], references: [id]) 
}


model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String?
  productId String

  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Products {
  id          String   @id @default(cuid())
  name        String
  description String
  images      String[]
  price       String
  discount    Int
  ratings     Int
  features    String[]
  highlights  String[]
  insideBox   String[]
  isTrendy    Boolean  @default(false)
  category    String?
  sellerId    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  review   Review[]
  referralPercentage Float?
  referralBy         String?
  Faq      Faq[]
  orders   Order[]
  transactions ReferralTransaction[] 
  cartItems CartItem[] @relation("ProductCartItems")
}

model Associate {
  id        String   @id @default(uuid())
  userId    String   @unique
  level     Int
  percent   Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Referral {
  id           String   @id @default(uuid())
  referral     String   @unique
  createdForId String   
  usedBy       String[] @default([])
  createdAt    DateTime @default(now())

  createdFor   User     @relation("CreatedReferrals", fields: [createdForId], references: [id], onDelete: Cascade)
  transactions ReferralTransaction[]
  usedByUsers User[] @relation("ReferralUsedByUsers")
}

model ReferralTransaction {
  id           String   @id @default(uuid())
  referralId   String
  associateId  String
  userId       String?
  productId    String?
  productName  String
  price        Float
  percent      Float
  commission   Float
  createdAt    DateTime @default(now())
  sellerId     String? 
  referral     Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  associate    User     @relation("AssociateUser", fields: [associateId], references: [id], onDelete: Cascade)
  user         User?    @relation("ReferredUser", fields: [userId], references: [id], onDelete: Cascade)
  product     Products? @relation(fields: [productId], references: [id], onDelete: Cascade) 
}

model Order {
  id            String    @id @default(cuid())
  productId     String
  userId        String
  quantity      Int
  totalAmount   Float
  status        String
  address       String
  paymentMode   String    @default("COD")
  referralCode  String?  
  sellerId      String?
  createdAt     DateTime  @default(now())

  product       Products? @relation(fields: [productId], references: [id])
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model CartItem {
  id               String   @id @default(cuid())
  userId           String
  productId        String
  quantity         Int      @default(1)
  discountedPrice  Float?
  referralCode     String?   
  referralPercent  Float?    // Added this
  createdAt        DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Products @relation("ProductCartItems", fields: [productId], references: [id], onDelete: Cascade)
}




model Kyc {
  id              String   @id @default(cuid())
  fullName        String
  dateOfBirth     DateTime
  address         String
  phoneNumber     String
  email           String
  aadharNumber    String
  panNumber       String
  aadharFront     String
  aadharBack      String
  panCard         String
  passport        String?
  bankStatement   String?
  salarySlip      String?
  image           String
  status          String   @default("PENDING")
  sellerId        String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  seller          User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
}


model Support {
  id           String   @id @default(cuid())
  userId       String
  sellerId     String?
  subject      String   // Order | Enquire | Other
  subSubject   String?   // Delivery Related | Payment Related | etc.
  relatedId    String?  // productId or enquireId
  message      String
  replyMessage String?
  createdAt    DateTime @default(now())

  user         User     @relation("SupportUser", fields: [userId], references: [id], onDelete: Cascade)
  seller       User?     @relation("SupportSeller", fields: [sellerId], references: [id], onDelete: Cascade)
}


model CommissionLevel {
  id        String   @id @default(cuid())
  level     Int      @unique
  percent   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CommissionOverride {
  level       Int     @id
  newPercent  Float
}
